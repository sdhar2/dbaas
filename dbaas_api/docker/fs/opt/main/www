/**
 * Main script that kicks off the Nodejs HTTP engine
 */

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webservice');
var fs = require('fs');
var https = require('https');
var app_logger = require('../utils/app_logger');

var privateKey;
var certificate;
var webservice_port = process.argv[2];

app_logger.info("=======HTTPS Web Service Starts========");

try
{
  privateKey = fs.readFileSync('/opt/dbaas_api/bin/sslcert/server-private-key.pem', 'utf8');
  certificate = fs.readFileSync('/opt/dbaas_api/bin/sslcert/server-cert.pem', 'utf8');
}
catch (err)
{
  app_logger.info("Error reading SSL certificate files, err=" + err + ", exit");
  process.exit(1);
}

var credentials = {key: privateKey, cert: certificate};

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || webservice_port);
app.set('port', port);

/**
 * Create HTTPS server.
 */
var httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */
httpsServer.listen(port);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
